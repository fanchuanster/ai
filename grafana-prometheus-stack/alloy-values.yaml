# helm upgrade --install alloy grafana/alloy -n alloy --create-namespace -f alloy-values.yaml

controller:
  type: deployment
  replicas: 1

rbac:
  create: true

# extraRBAC:
#   create: true
#   rules:
#     - apiGroups: [""]
#       resources: ["pods", "pods/log", "namespaces"]
#       verbs: ["get", "list", "watch"]

# traces
# service:
#   enabled: true
#   ports:
#     - name: otlp-grpc
#       port: 4317
#       targetPort: 4317
#     - name: otlp-http
#       port: 4318
#       targetPort: 4318

alloy:
  mounts:
    varlog: false
    dockercontainers: false

  configMap:
    create: true
    content: |
      // Discover Kubernetes pods
      discovery.kubernetes "pods" {
        role = "pod"
      }

      // Relabel to add metadata
      discovery.relabel "pod_logs" {
        targets = discovery.kubernetes.pods.targets
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label = "namespace"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label = "pod"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label = "container"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_label_app"]
          target_label = "app"
        }
        rule {
          action = "replace"
          source_labels = [""]
          target_label = "job"
          replacement = "kubernetes-pods"
        }
      }

      // Tail logs via Kubernetes API. input and receiver are slightly different and here interchangable.
      loki.source.kubernetes "k8s_logs" {
        targets    = discovery.relabel.pod_logs.output
        forward_to = [loki.process.pipeline.input]
      }

       // NEW: parse JSON, pick labels, and make sure trace_id/span_id are NOT labels
      loki.process "pipeline" {
        stage.json {}

        stage.labels {
          values = {
            "namespace" = "namespace",
            "pod"       = "pod",
            "container" = "container",
            "app"       = "app"
          }
        }

        // keep Loki index lean; trace_id/span_id stay only in the line (JSON)
        stage.labeldrop { values = ["trace_id", "span_id"] }

        forward_to = [loki.write.default.receiver]
      }

      loki.write "default" {
        endpoint {
          url = "http://loki-gateway.loki.svc.cluster.local/loki/api/v1/push"
        }
      }
