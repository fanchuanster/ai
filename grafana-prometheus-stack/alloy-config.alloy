server "http" {
  listen_address = "0.0.0.0:12345"
}

local.file_match "container_logs" {
  path_targets = [
    "/var/log/containers/*.log"
  ]
}

kubernetes.label_enricher "pod_labels" {
  api_server {
    auth_type = "kubeconfig"
  }
}

loki.process "k8s_logs" {
  targets = [local.file_match.container_logs.target]
  forward_to = [loki.write.default.receiver]
  labelmap {
    "__path__" = ""
    "filename" = "filename"
  }

  labels = {
    job = "kubernetes-pods"
  }

  enrich {
    with_kubernetes_metadata {
      label_enricher = kubernetes.label_enricher.pod_labels.receiver
    }
  }
}

loki.write "default" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}



// metrics
prometheus.scrape "pods" {
  targets = discovery.kubernetes.pod.targets

  forward_to = [prometheus.remote_write.default.receiver]

  scrape_interval = "30s"

  relabel {
    rule {
      action = "keep"
      source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
      regex         = "true"
    }
    rule {
      action = "replace"
      source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_path"]
      target_label  = "__metrics_path__"
      regex         = "(.+)"
    }
    rule {
      action = "replace"
      source_labels = ["__address__", "__meta_kubernetes_pod_annotation_prometheus_io_port"]
      target_label  = "__address__"
      replacement   = "$1:$2"
    }
  }
}

discovery.kubernetes "pod" {
  role = "pod"
}

prometheus.remote_write "default" {
  endpoint {
    url = "https://your-prometheus-remote/api/v1/write"
  }
}



// traces - alloy daemonset exposed as service like - alloy.monitoring.svc:4317
// pod / apps send traces via 
// from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
// exporter = OTLPSpanExporter(endpoint="http://alloy.monitoring.svc:4317", insecure=True)
otelcol.receiver.otlp "default" {
  protocols = {
    grpc = { endpoint = "0.0.0.0:4317" }
    http = { endpoint = "0.0.0.0:4318" }
  }
}

otelcol.exporter.otlp "tempo" {
  client {
    endpoint = "tempo.monitoring.svc:4317"
    tls {
      insecure_skip_verify = true
    }
  }
}

otelcol.processor.batch "default" {}

otelcol.processor.memory_limiter "default" {}

otelcol.service "default" {
  pipelines {
    traces = {
      receivers = [otelcol.receiver.otlp.default]
      processors = [
        otelcol.processor.memory_limiter.default,
        otelcol.processor.batch.default,
      ]
      exporters = [otelcol.exporter.otlp.tempo]
    }
  }
}
